Malware sample, unknown.exe, from https://github.com/PacktPublishing/Malware-Analysis-Techniques/tree/main    chapter 6

I will be conducting a static analysis of unknown.exe using REMnux, a free tool for Linux.

First, to confirm the file type, I will be using the commands "file" and "trid":
  "file unknown.exe" returns a PE32 executable (GUI) Intel 80386, for MS Windows, UPX compressed
  "trid unknown.exe" confirms it is a Win32 Executable as well
  
Conducting a SHA256 sum with "sha256sum unknown.exe" returns "d1f85945fa3f402202ed31fc7322c3328676a1d609fc9c17ee3a3cb6a49aa5fb". This will
be used to search VirusTotal later.

Next I will scan the malware locally with ClamAV. But first, I need to update ClamAV's antivirus database. 
I will use 
"""	sudo service clamav-freshclam stop
	  sudo freshclam
	  sudo service clamav-freshclam start
"""

ClamAV identifies this malware as Win.Malware.Azden-7587127, a trojan. Googling the Azden malware family is a great starting point to get more information
about the general operation and goals of this executable.

Now, I will try and find any interesting strings or encoded data in unknown.exe by using a few different tools included with REMnux.

  "signsrch unknown.exe" does not turn up any cryptographic or encoding results
  
  However, "peframe unknown.exe" returns many interesting results. We can see that this malware uses a packer to try and hide from analysis. 
  
  "pecheck unknown.exe" shows this file has high entropy, so it is again likely encoded or obfuscaped (and packed) so we can't see what's going on.
  With pecheck we can look at the Image_DOS_Header and confirm the e_magic is 5A4D, hex for 'MZ', a windows executable. Furthermore, the Image_Section_Headers 
  reveal that the raw size is smaller than the virtual size (it's packed). Other indicators from these tools indicate it can edit the registry, download files, 
  and more. There is no overlay to extract.
  
  With "strings --encoding=l unknown.exe" and "strings unknown.exe" we find the strings:
    "This program cannot be run in DOS mode." (more evidence this is an exe)
    "HARDWE\ACPI\DSDT\VBOX__" (detecting if it is run in a virtual environment)
    "VIRTUALPROTECT" (used to modify memory protection)

The following tools to find encoded strings didn't supply any new information, but are worth a shot. 
  "xorsearch unknown.exe http"
  "brxor.py unknown.exe" 
  "floss unknown.exe --no static"
  "bbcrack unknown.exe" (this is slow, and can add many new files to search through for more strings by changing the encoding slightly)


Another useful tool is capa. Capa is nice because it provides helpful explanations about what it finds and saves some time on lookups for less experienced
analysts. I use the "-vv" option to force capa to run on a packed file.
  "capa -vv unkown.exe"
Capa explains that this malware uses anti-vm technologies, and is once again UPX packed.


Jumping back to the SHA256 sum, Virus Total overwhelmingly identifies this file as malicious. There have been several sandbox analysis submissions
which is convenient since hybrid analysis by CrowdStrike is currently down. These reports reveal calls to gettickcount and sleep calls, both used
to avoid being analyzed in a sandbox. Another call to setwindowshookexa lets the malware listen to the keyboard or mouse movement. The reports reveal
outgoing http connections, registry edits, and numerous file editing as well. 


Based off of all of this information, this malware can read files, contact a server/make outgoing connections, edit the registry, and download files.
It appears to be quite the tool. Other tools to explore for next time are binee and qltool to emulate running unknown.exe in a windows environment. However,
the sandbox reports to Virus Total provide this information for this file.
